from fastapi import FastAPI, Response, status, HTTPException
from fastapi.params import Body
from pydantic import BaseModel
from typing import Optional
from random import randrange
import psycopg2
from psycopg2.extras import RealDictCursor
import time

app = FastAPI()

# Regex
class Post(BaseModel):
    title: str
    content: str
    number: str


# connecting to database and handling connection if connection fails
while True:

    try:
        conn = psycopg2.connect(host='enterhost', database='Dbname', user='postgres',
                                password='Your password', cursor_factory=RealDictCursor)
        cursor = conn.cursor()
        print("Database connection was successfull")
        break
    except Exception as error:
        print("Connecting to database failed")
        print("Error : ", error)
        time.sleep(2)

@app.get("/")
async def root():
    return {"message": "Hello World"}

# Returns all posts from the DB
@app.get("/posts")
async def posts():
    cursor.execute("""SELECT * FROM posts """)
    posts = cursor.fetchall()
    return {"message": posts}
    
#Creates a new post
@app.post("/posts", status_code=status.HTTP_201_CREATED)
async def create_posts(post: Post):
    # post_dict = post.dict()
    # post_dict['id'] = randrange(0, 100000)
    # my_posts.append(post_dict)
    new_post = cursor.execute(
        """INSERT INTO posts (title, content, number) VALUES (%s, %s, %s) RETURNING * """, (post.title, post.content, post.number))
    new_post = cursor.fetchone()
    conn.commit()
    return {"data": new_post}
# title str, content str, number int

# Retrives particular post from the DB with ID
@app.get('/posts/{id}')
def get_post(id: int, response: Response):
    cursor.execute("""SELECT * FROM posts WHERE id = %s """, (str(id)))
    post = cursor.fetchone()
    print(post)
    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"Post with id: {id} was not found")
        # response.status_code = status.HTTP_404_NOT_FOUND
        # return {'message': f"Post with id: {id} was not found"}
    return {"post_details": post}

#Deletes a post of particular ID from the DB
@app.delete("/posts/{id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_post(id: int):
    cursor.execute(
        """DELETE FROM posts WHERE id = %s returning *""", (str(id),))
    deleted_post = cursor.fetchone()
    conn.commit()
    if deleted_post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"Post with id: {id} doesnot exist")
    return Response(status_code=status.HTTP_204_NO_CONTENT)

# Updates the body of particular post in the DB
@app.put("/posts/{id}")
def update_post(id: int, post: Post):
    cursor.execute("""UPDATE posts SET title = %s, content = %s, number = %s WHERE id = %s RETURNING *""",
                   (post.title, post.content, post.number, str(id)))
    updated_post = cursor.fetchone()
    conn.commit()
    if updated_post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"Post with id: {id} doesnot exist")
    return {'data': updated_post}
